# Rotate left through carry (with fetch)
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE RAL_PG

# assume: Y = $VMS
LDZ HL, $INC2$NULL
FNH DZ, HLD           # inc state
LD HL, $IDEN$NULL
LDZ Y, $AREG
FNH DZ, HLA           # A = Acc
#10
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
#20
NOP
NOP
NOP
NOP
NOP
LD HL, $LSL$NULL
LDP PC, $RESET_CARRY
#29 $SET_CARRY
NOP
LDZ Y, $AREG
FNH DZ, HLD           # shift Acc left
LD HL, $IDEN$NULL
LDZ Y, $FREG
FNH DZ, HLA           # A = flags
#39
LDP HL, $0
LDN HL, $1
LD Y, $AREG
ORH DZ, ND            # set LSB of Acc
LD HL, $0x80
#49
LD Y, $FREG
ORHL DZ, ND           # set carry
LD HL, $INC$FORK1
LD Y, $PCL
#59
FNFH DZ, XD           # X,PCL = PCL+1
FNEL A, PC
#65

$RESET_CARRY
LDZ Y, $AREG
FNH DZ, HLD           # shift Acc left
LD HL, $IDEN$NULL
LDZ Y, $FREG
FNH DZ, HLA           # A = flags
#39
LDP HL, $0
LDN HL, $1
LD Y, $AREG
ORH DZ, ND            # set LSB of Acc
LD HL, $0x7F
#49
LD Y, $FREG           
ANDHL DZ, ND          # reset carry
LD HL, $INC$FORK1
LD Y, $PCL
#59
FNFH DZ, XD           # X,PCL = PCL+1
FNEL A, PC
#65

ADDR 0x80
LDZ Y, $PCH
FNH DZ, HLD           # PCH = PCH+1      *** inc PCH ***
LD HL, $IDEN$NULL
#71
FNH DZ, Y             # Y = PCH
FNFH M, NA            # A = [PC]
LD Y, $INST
FNH AZ, HLD           # cache instruction (from HL)
#80
LD Y, $VMS            # set Y = $VMS on exit
VMPHL DZ, PGA         # jump to next VMC
#86

ADDR 0xC0
NOP
NOP
LD HL, $IDEN$NULL
LDZ Y, $PCH
#71
FNH DZ, Y             # Y = PCH
FNFH M, NA            # A = [PC]
LD Y, $INST
FNH AZ, HLD           # cache instruction (from HL)
#80
LD Y, $VMS            # set Y = $VMS on exit
VMPHL DZ, PGA         # jump to next VMC
#86
