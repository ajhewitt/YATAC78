# Unary function codes
$NULL       0

#FNF, FNH - default
$IDEN       0 # A = A
$INC        1 # A = A+1
$DEC        2 # A = A-1
$INC2       3 # A = A+2
$1COM       4 # A = ~A
$2COM       5 # A = -A
$LSR        6 # A>>1
$LSL        7 # A<<1
$ZERO?      8 # alias for over?
$OVER?      8 # 0 if 0, else -1
$UNDER?     9 # -1 if -1, else 0
$INCLINE   10 # ML +1, cyc=0
$INCPROC   11 # ML reset, cyc=1
$NSR       12 # >>1&0x80
$SWAP      13 # AB -> BA
$REVERSE   14 # reverse bits
#AUDIO     15 # reverse bits, flip sign

#FNE - HAL
$INCCYC     0 # cyc+1, ext=0
$FORKJ      1 # feature fork (audio, rx, tx/kb)
$FORKK      2 # keyboard fork
$ADSRPG     3 # FRAME->ADSR Page
$KS01?      4 # A&3==0||1 ? 0:-1
$KDATA      5 # A&C<<2
$TKTOG      6 # 81->C2->98,83->E2->9A
$RXS2M      7 # Rx state to mult/mode
$XGA?       8 # mode-line>11?: 0-10->-1,else->0
$ML2ADJ     9 # mode-line to T0 adjust: 0-2->0xE0,else->0xF0
$MASK2MODE 10 # &8==0 ? -1:0
$SUS2LEV   11 # sustain to level
$SQRWAV    12 # MIDI->bandlimited Square WAV
$SAWWAV    13 # MIDI->bandlimited Sawtooth WAV
$FREQL     14 # MIDI->TONE delta L
$FREQH     15 # MIDI->TONE delta H

#FND - CPU
$FORKI      0 # interupt vector fork
$FORK1      1 # 0->0x80,else->0xC0
$FORK2      2 # 0xFF->0x40,0->0x80,else->0xC0
$FORK3      3 # 0xFE->0x20,0xFF->0x38,0->0x90,else->0xC8
$REGMAPH    4 # map dest/hi register to zpage addr
$REGMAPL    5 # map source/low register to zpage addr
$F2PSW      6 # flags->PSW
$PSW2F      7 # PSW->flags
$SWCARRY    8 # swap carry with borrow flags
$DACARRY    9 # set carry if nibbles > 9
$CON2MUL   10 # condition code to flag multiplier
$RSTVEC    11 # map inst+1 to PCL vector




#FNC - Extended
$SCAN0      0 #lower/upper scan code->ascii
$SCAN1      1 #extended/control scan code->ascii
$SCAN2      2 #alt/ext-ctrl-alt scan code->ascii
$SC2MASK    3 #scan code->kmode mask bit
