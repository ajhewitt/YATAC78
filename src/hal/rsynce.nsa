# H-sync with comms rx on execute
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE RSYNCE_PG

# PMODE: column in AV used during process cycle
# VLINE: line(page) in video ram
# VMS: [mode_line][e][cycle count]
#           0,1,2  0  0,1,2,3,4,5
#         3,4,5,6  1  0,1,2,3,4
#        7,8,9,10     0,1,2,3,4
#  11,12,13,14,15     0,1,2,3
# assume Y = $VMS
LDZ HL, $INCLINE$NULL
FNH DZ, HLD           # H=mode_line+1, L=E000
LD Y, $PMODE
VIDH DZ, SA           # mode_line, pmode —> S
#9/7
LDP HL, $IDEN$IDEN    # sign bit low, don’t inc vline
LDN HL, $INC$IDEN     # sign bit high, inc vline
LD Y, $VLINE
FNFH DZ, VD           # increment? vline —> V
FNFL E, HL            # serial inputs -> H
#20/17
LD Y, $COMLS
COMH DZ, ND           # update comms line state
LD HL, $IDEN$FORKJ
LD Y, $RMODE
FNEL DZ, PC           # comms  mode fork
#32/27

ADDR 0x20             # mode 0: receive off
NOP
LDZ Y, $INST
FNH DZ, HL            # inst cache -> HL
LD Y, $VMS            # set Y = $VMS on exit
VMPHL DZ, PGA         # jump to next VMC
#43/39

ADDR 0x30             #32 - mode 0x01: receive enable
LD HL, $IDEN$NULL
LD Y, $RTO
FNFH DZ, NA           # A = rx timeout
LD Y, $RIDLE
#41/56
FNH AZ, HLD           # A -> rx idle
LD HL, $INC$NULL
LDZ Y, $RMODE
FNH DZ, HLD           # 2 -> rx mode
LD HL, $0x70
#51/64
LD Y, $EREG
ANDHL DZ, ED          # 0 -> RTS (assert)
LD PC, $EXIT59
#59/70

ADDR 0x50             #32 - mode 0x02: receive start
LD HL, $IDEN$NULL
LDZ Y, $COMPS
FNH DZ, HLA           # A sign = Rx data
LDP PC, $START
#39/88
LD HL, $INC$NULL
LDZ Y, $RIDLE
FNH DZ, HLD           # rx idle+1
LDN PC, $EXIT47       # exit until timeout
LD HL, $0x10
LD Y, $EREG
#50/99
ORHL DZ, ED           # 1 -> RTS (deassert)
LD HL, $0xE1
LD Y, $RMODE
ANDHL DZ, ND          # 0 -> rx mode (timeout transmission)
#62/107
LD PC, $EXIT64
$START                #40 - start bit
LD HL, $IDEN$NULL
LD Y, $RTO
FNFH DZ, NA           # A = rx timeout
LD Y, $RIDLE
FNH AZ, HLD           # A -> rx idle
#51/118
LD HL, $0x24
LD Y, $RMODE
MVHL AZ, ND           # 4 -> rx mode
LD PC, $EXIT61
#61/126

ADDR 0x80             # mode 0x04-0x12: receive data bit
LD HL, $RXBUFF
MVHL A, XA            # X = Rx buffer
LD HL, $IDEN$NULL
#40/134
LDZ Y, $COMPS
FNH DZ, HLA           # A sign = Rx data
LDP HL, $LSR$IDEN     # shift right, reset MSB
LDN HL, $NSR$IDEN     # shift right, set MSB
LDZ Y, $RXWRIDX
#49/143
FNFL DZ, Y            # Y = Rx write index
FNFH D, ND            # Rx data shift right, set/reset MSB
LD HL, $INC2$NULL
LDZ Y, $RMODE
#59/151
FNH DZ, HLD           # mode+2
LD PC, $EXIT63
#63/154

ADDR 0xA0             #32 - mode 0x14: receive stop
LD HL, $0xEE          # HL = -0x12
LD Y, $RMODE
ADDHL DZ, ND          # 2 -> Rx mode
#40/166
LD HL, $INC$2COM
LD Y, $VMS
FNFH DZ, ND           # VMS+1
LD Y, $RXWRIDX
#49/174
FNFH DZ, ND           # A,RxWrIndex+1
LD Y, $RXRDIDX
FNFL DZ, HL           # HL = -RxRdIndex
ADDHL A, NA           # A = RxWrIndex - RxRdIndex
#61/182
LD HL, $UNDER?$NULL
FNH A, HLA            # A = -1 if RxWrIndex == RxRdIndex-1
LDP PC, $EXIT67       # jump on end of transmission
LD HL, $0x10
LD Y, $EREG
#70/191
ORHL DZ, ED           # 1 -> RTS (deassert)
LD HL, $IDEN$NULL
LDZ Y, $INST
FNH DZ, HL            # inst cache -> HL
#80/198
LD Y, $VMS            # set Y = $VMS on exit
VMPHL DZ, PGA         # jump to next VMC
#86/202

$EXIT47
NOP
NOP
NOP
#50/205
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
$EXIT59
NOP
#60/215
NOP
$EXIT61
NOP
NOP
$EXIT63
NOP
$EXIT64
NOP
NOP
NOP
$EXIT67
NOP
LD HL, $INC$NULL
#70/225
LD Y, $VMS
FNH DZ, HLD           # VMC+1
LD HL, $IDEN$NULL
LDZ Y, $INST
FNH DZ, HL            # inst cache -> HL
#80/233
LD Y, $VMS            # set Y = $VMS on exit
VMPHL DZ, PGA         # jump to next VMC
#86/237
