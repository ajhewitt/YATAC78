# H-sync at end of process cycle on execute
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE PSYNCE_PG

# PMODE: column in VID used during process cycle
# VLINE: line(page) in video ram
# VMS: [mode_line][e][cycle count]
#           0,1,2  0  0,1,2,3,4,5
#         3,4,5,6  1  0,1,2,3,4
#        7,8,9,10     0,1,2,3,4
#  11,12,13,14,15     0,1,2,3
# assumes Y=$VMS
LDZ HL, $INCPROC$NULL
FNH DZ, HLD               # H=mode_line start, L=E001
LD Y, $PMODE
VIDH DZ, SA               # mode_line, pmode —> S
#9/7
LDP HL, $IDEN$IDEN        # sign bit low, don’t inc vline
LDN HL, $INC$IDEN         # sign bit high, inc vline
LD Y, $VLINE
FNFH DZ, VD               # increment? vline —> V
FNFL E, HL                # H = serial inputs
#20/17
LD Y, $COMLS
COMH DZ, ND               # update comms line state
LD HL, $IDEN$8
LD Y, $COMPS
#29/25
FNFH AZ, ND               # comms line state -> comms process state
DIVL E, HL                # H = ps2 clk
LD Y, $COMLS
MVH DZ, ND                # H -> ps2 state
#40/33
LD HL, $SWAP$NULL
LDZ Y, $IMASK
FNH DZ, HLA               # A = IMASK<<4
LDP HL, $0xFF             # IMODE: -1
LDN HL, $0                # IMODE: 0
#49/42
LD Y, $IMODE
MVHL AZ, ND               # HL -> IMODE
LD HL, $INC$NULL
LDZ Y, $PLINE
#59/50
FNH DZ, HLD               # A,pline = pline+1
LD HL, $IDEN$NULL
LDZ Y, $VMODE
FNH DZ, HL                # H = vmode
LD Y, $PMODE
#69/58
VIDH AZ, ND               # VID(vmode,pline) -> pmode
LD HL, $IDEN$NULL
LDP PC, $NEXT_FIELD       # jump if pmode zero?
NOP
LDZ Y, $INST
FNH DZ, HL                # inst cache -> HL
#80/68
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#86/72

$NEXT_FIELD               #76 - next field, cycle=1
LD Y, $PLINE
MULH DZ, ND               # 0 -> pline
#81/76
LDZ Y, $VMODE
FNH DZ, HL                # H = vmode
LD Y, $PMODE
VIDH AZ, ND               # VID(vmode,pline) -> pmode
#90/83
LD HL, $IDEN$NULL
LD Y, $VSTART
FNFH DZ, NA               # A = vertical start
LDZ Y, $VLINE
FNH AZ, HLD               # vstart -> vline
#101/92
LD HL, $INC$NULL
LD Y, $VMS
FNFH DZ, ND               # VMS+1 (cycle=2)
LDZ Y, $FRAME
#110/100
FNH DZ, HLD               # frame count+1
NOP
NOP
NOP
LDP PC, $KBD_SCAN         # scan keyboard on FRAME 0
NOP
LD HL, $IDEN$NULL
LDZ Y, $INST
#121/111
FNH DZ, HL                # inst cache -> HL
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#129/116

$KBD_SCAN                 #117 - scan keyboard, cycle=2
LDZ Y, $TMODE
FNH DZ, HLD               # set LSB -> TMODE to stop Tx
#121/119
LD HL, $IDEN$NULL
LD Y, $KTO1
FNFH DZ, HLA              # PS/2 clk timeout
LDZ Y, $KIDLE
#130/127
FNH AZ, HLD               # clk timeout -> PS/2 idle count
LD HL, $XGA?$NULL
LD Y, $VMS
FNEH DZ, NA
LDP PG, $XSYNCE_PG        # jump page if 4-cycle per line
#140/136
LD HL, $ML2FC$NULL
LD Y, $FRAME
FNEH AZ, ND               # -4/-5 -> Frame count
LD HL, $INC$NULL
LD Y, $VMS
#151/146
FNFH DZ, ND               # VMS+1 (cycle=3)
LDZ Y, $T0
FNH DZ, HLD               # T0+1
LDN PC, $RET_15TPS        # return if T0<90
NOP
#160/154
LD HL, $0xA6
MVHL AZ, ND               # T0 = -90
LD HL, $INC$NULL
LDZ Y, $T1
#170/162
FNH DZ, HLD               # T1+1
LDN PC, $T0_ADJUST        # return if T1<120
LD HL, $0x88
MVHL AZ, ND               # T1 = -120
LD HL, $INC$NULL
#181/171
LDZ Y, $T2
FNH DZ, HLD               # T2+1
LDN PC, $RET_5TPH         # return if T2<120
LD HL, $0x88
MVHL AZ, ND               # T2 = -120
#192/180
LD HL, $INC$NULL
LD Y, $T3
FNFH DZ, ND               # T3+1
LDZ Y, $VMS
#201/188
FNH DZ, HLD               # VMS+1 (cycle=4)
LD HL, $IDEN$NULL
LDZ Y, $INST
FNH DZ, HL                # inst cache -> HL
#209/194
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#215/198

$T0_ADJUST                #174 - 10 ticks per min, cycle=3
LD HL, $0xF0
ORHL A, NA                # A = T1 | 0xF0
#180/202
LDZ HL, $INC$NULL
FNH A, HLA                # A+1 (A +ve if T1=0x?F)
LDP HL, $INC$NULL
LDN HL, $IDEN$NULL
LDZ Y, $T0
FNH DZ, HLD               # adjust T0 every 16 T1
#191/212
LD HL, $INC$NULL
LD PC, $RET_10TPM
#195/216

$RET_5TPH                 #187 - 5 ticks per hour, cycle=3
NOP
NOP
NOP
#190/219
NOP
NOP
NOP
NOP
NOP
$RET_10TPM                #195 - 10 ticks per min, cycle=3
NOP
NOP
LD HL, $INC$NULL
#199/228
LDZ Y, $VMS
FNH DZ, HLD               # VMS+1 (cycle=4)
$RET_15TPS                #160 - 15 ticks per second, cycle=3
LD HL, $IDEN$NULL
LDZ Y, $INST
FNH DZ, HL                # inst cache -> HL
#209,166/236
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#215,172/240
