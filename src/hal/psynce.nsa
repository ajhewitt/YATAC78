# H-sync at end of process cycle on execute
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE PSYNCE_PG

# PMODE: column in VID used during process cycle
# VLINE: line(page) in video ram
# VMS: [mode_line][e][cycle count]
#           0,1,2  0  0,1,2,3,4,5
#         3,4,5,6  1  0,1,2,3,4
#        7,8,9,10     0,1,2,3,4
#  11,12,13,14,15     0,1,2,3
# assumes Y=$VMS
LDZ HL, $INCPROC$NULL
FNH DZ, HLD               # H=mode_line start, L=E001
LD Y, $PMODE
VIDH DZ, SA               # mode_line, pmode —> S
#9/7
LDP HL, $IDEN$IDEN        # sign bit low, don’t inc vline
LDN HL, $INC$IDEN         # sign bit high, inc vline
LD Y, $VLINE
FNFH DZ, VD               # increment? vline —> V
FNFL E, HL                # H = serial inputs
#20/17
LD Y, $COMLS
COMH DZ, ND               # update comms line state
LD HL, $IDEN$8
LD Y, $COMPS
#29/25
FNFH AZ, ND               # comms line state -> comms process state
DIVL E, HL                # H = ps2 clk
LD Y, $COMLS
MVH DZ, ND                # H -> ps2 state
#40/33
LD HL, $SWAP$NULL
LDZ Y, $IMASK
FNH DZ, HLA               # A = IMASK<<4
LDP HL, $0xFF             # IMODE: -1
LDN HL, $0                # IMODE: 0
#49/42
LD Y, $IMODE
MVHL AZ, ND               # HL -> IMODE
LD HL, $INC$NULL
LDZ Y, $PLINE
#59/50
FNH DZ, HLD               # A,pline = pline+1
LD HL, $IDEN$NULL
LDZ Y, $VMODE
FNH DZ, HL                # H = vmode
LD Y, $PMODE
#69/58
VIDH AZ, ND               # VID(vmode,pline) -> pmode
LD HL, $IDEN$NULL
LDP PC, $NEXT_FIELD       # jump if pmode zero?
NOP
LDZ Y, $INST
FNH DZ, HL                # inst cache -> HL
#80/68
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#86/72

$NEXT_FIELD
LD Y, $PLINE
MULH DZ, ND               # 0 -> pline
#81/76
LDZ Y, $VMODE
FNH DZ, HL                # H = vmode
LD Y, $PMODE
VIDH AZ, ND               # VID(vmode,pline) -> pmode
#90/83
LD HL, $IDEN$NULL
LD Y, $VSTART
FNFH DZ, NA               # A = vertical start
LDZ Y, $VLINE
FNH AZ, HLD               # vstart -> vline
#101/92
LD HL, $INC$NULL
LDZ Y, $FRAME
FNFH DZ, ND               # frame count +1
LDP PC, $KBD_SCAN         # scan keyboard on FRAME 0
NOP
#110/101
NOP
NOP
NOP
LDZ Y, $VMS
FNH DZ, HLD               # VMS +1
LD HL, $IDEN$NULL
LDZ Y, $INST
#121/111
FNH DZ, HL                # inst cache -> HL
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#129/116

$KBD_SCAN
#110/116
LDZ Y, $RMODE
FNH DZ, HLD               # set LSB -> RMODE to force keyboard scan
LD HL, $IDEN$NULL
LD Y, $KTO
FNFH DZ, NA               # PS/2 clk timeout
#121/125
LDZ Y, $KIDLE
FNH AZ, HLD               # clk timeout -> PS/2 idle count
LD HL, $0x18
LD Y, $EREG
#129/132
ORHL DZ, ED               # E | 00011000 -> E
LD HL, $XGA?$NULL
LD Y, $VMS
FNEH DZ, NA
#140/140
LDP PG, $XSYNCE_PG        # jump page if 4-cycle per line
LDZ HL, $INC2$NULL
FNH DZ, HLD               # VMS +2
LD HL, $ML2FC$NULL
LD Y, $FRAME
#149/149
FNEH AZ, ND               # -4/-5 -> Frame count
LD HL, $INC$NULL
LDZ Y, $T0
FNH DZ, HLD               # T0 +1
LDN PC, $RET_15TPS        # return if T0<90
NOP
#160/158
LD HL, $0xA6
MVHL AZ, ND               # T0 = -90
LD HL, $INC$NULL
LDZ Y, $T1
#170/166
FNH DZ, HLD               # T1 +1
LDN PC, $T0_ADJUST        # return if T1<120
LD HL, $0x88
MVHL AZ, ND               # T1 = -120
LD HL, $INC$NULL
#181/175
LDZ Y, $T2
FNH DZ, HLD               # T2 +1
LDN PC, $RET_5TPH         # return if T2<120
LD HL, $0x88
MVHL AZ, ND               # T2 = -120
#192/184
LD HL, $INC$NULL
LD Y, $T3
FNFH DZ, ND               # T3 +1
LDZ Y, $VMS
#201/192
FNH DZ, HLD               # VMS +1
LD HL, $IDEN$NULL
LDZ Y, $INST
FNH DZ, HL                # inst cache -> HL
#209/198
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#215/202

$RET_15TPS                #160 - 15 ticks per second
#160/202
LD HL, $IDEN$NULL
LDZ Y, $INST
FNH DZ, HL                # inst cache -> HL
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#172/211

$T0_ADJUST                #174 - 10 ticks per min
LD HL, $0xF0
ORHL A, NA                # A = T1 | 0xF0
#180/215
LDZ HL, $INC$NULL
FNH A, HLA                # A +1 (A +ve if T1=0x?F)
LDP HL, $INC$NULL
LDN HL, $IDEN$NULL
LDZ Y, $T0
FNH DZ, HLD               # adjust T0 every 16 T1
#191/225
LD HL, $INC$NULL
LD PC, $RET_10TPM
#195/229

$RET_5TPH                 #187 - 5 ticks per hour
NOP
NOP
NOP
#190/232
NOP
NOP
NOP
NOP
NOP
$RET_10TPM                #195 - 10 ticks per min
NOP
NOP
NOP
NOP
#199/241
LDZ Y, $VMS
FNH DZ, HLD               # VMS +1
LD HL, $IDEN$NULL
LDZ Y, $INST
FNH DZ, HL                # inst cache -> HL
#209/250
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#215/254
