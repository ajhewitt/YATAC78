# H-sync at end of process cycle on fetch2
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE PSYNCF2_PG

# PMODE: column in VID used during process cycle
# VLINE: line(page) in video ram
# VMS: [mode_line][e][cycle count]
#           0,1,2  0  0,1,2,3,4,5
#         3,4,5,6  1  0,1,2,3,4
#        7,8,9,10     0,1,2,3,4
#  11,12,13,14,15     0,1,2,3
# assumes Y=$VMS
LDZ HL, $INCPROC$NULL
FNH DZ, HLD               # H=mode_line start, L=E001
LD Y, $PMODE
VIDH DZ, SA               # mode_line, pmode —> S
#9
LDP HL, $IDEN$IDEN        # sign bit low, don’t inc vline
LDN HL, $INC$IDEN         # sign bit high, inc vline
LD Y, $VLINE
FNFH DZ, VD               # increment? vline —> V
FNFL E, HL                # H = serial inputs
#20
LD Y, $COMLS
COMH DZ, NA               # A = update comms line state
LD HL, $IDEN$NULL
LDZ Y, $COMPS
#29
FNH AZ, HLD               # comms line state -> comms process state
LD HL, $1$MASK2MODE
LD Y, $COMLS
ANDH AZ, ND               # reset ps2 state/data
LD Y, $IMASK
#40
FNEL DZ, HL               # HL = IMODE
LD Y, $IMODE
MVHL AZ, ND               # HL -> IMODE
LD HL, $INC$NULL
#51
LDZ Y, $PLINE
FNH DZ, HLD               # A,pline = pline+1
LD HL, $IDEN$NULL
LDZ Y, $VMODE
FNH DZ, HL                # H = vmode
#61
LD Y, $PMODE
VIDH AZ, ND               # VID(vmode,pline) -> pmode
LDP PC, $NEXT_FIELD       # jump if pmode zero?
NOP
NOP
NOP
#70
NOP
NOP
NOP
NOP
MVHL A, NA                # NOP
LD HL, $FETCH2            # HL = fetch2
#80
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#86

$NEXT_FIELD               #68 - next field, cycle=1
LD HL, $IDEN$NULL
LD Y, $PLINE
MULH DZ, ND               # 0 -> A,pline
LDZ Y, $VMODE
FNH DZ, HL                # H = vmode
LD Y, $PMODE
#81
VIDH AZ, ND               # VID(vmode,pline) -> pmode
LD HL, $IDEN$NULL
LD Y, $VSTART
FNFH DZ, NA               # A = vertical start
#91
LD Y, $VLINE
FNH AZ, HLD               # vstart -> vline
LD HL, $INC$NULL
LDZ Y, $FRAME
FNH DZ, HLD               # frame count+1
#101
LDP PC, $KBD_SCAN         # scan keyboard on FRAME 0, cycle=1
LD HL, $DEC$NULL
LDZ Y, $AMODE
FNH DZ, HLA               # negative if AMODE = 0
LDN PC, $EXIT110          # exit if audio off, cycle=1
NOP
#110
LD HL, $FETCH2
LD Y, $INST
MVHL AZ, ND               # fetch2 -> inst cache
LD HL, $IDEN$ADSRPG
#120
LD Y, $FRAME
FNEL DZ, PG               # jump to envelope channel, cycle=1
#124

$KBD_SCAN                 #103 - scan keyboard, cycle=1
LD HL, $0x10
LD Y, $TMODE
ORH DZ, ND                # set LSB -> TMODE to stop Tx
#110
LD HL, $FETCH2
LD Y, $INST
MVHL AZ, ND               # fetch2 -> inst cache
LD HL, $XGA?$NULL
#120
LD Y, $VMS
FNEH DZ, NA
LDP PG, $XPSYNCE_PG       # jump page if 4-cycle per line
LDZ HL, $INC2$NULL
FNH DZ, HLD               # VMS+2 (cycle=3)
#130
LD HL, $IDEN$NULL
LDZ Y, $VMODE
FNH DZ, HLA               # A = 00xx,01xx,10xx,11xx
LDP HL, $LSL$NULL
LDN HL, $LSR$NULL
FNH A, HLA                # A = 0xxx,1xxx,010x,011x
#141
LDP HL, $0xFC             # -4
LDN HL, $0xFB             # -5
LD Y, $FRAME
MVHL AZ, ND               # vmode==01xx?-5:-4 -> Frame count
#150
NOP
NOP
LD HL, $INC$NULL
LDZ Y, $T0
FNH DZ, HLD               # T0+1
LDN PC, $EXIT160          # return if T0<90
#159
LD HL, $0xA6
MVHL AZ, ND               # T0 = -90
LD HL, $INC$ML2ADJ
LDZ Y, $T1
#169
FNFH DZ, ND               # T1+1
LDN PC, $T0_ADJUST        # return if T1<120
LD HL, $0x88
MVHL AZ, ND               # T1 = -120
LD HL, $INC$NULL
#181
LDZ Y, $T2
FNH DZ, HLD               # T2+1
LDN PC, $EXIT187          # return if T2<120
LD HL, $0x88
MVHL AZ, ND               # T2 = -120
#192
LD HL, $INC$NULL
LD Y, $T3
FNFH DZ, ND               # T3+1
LDZ Y, $VMS
#201
FNH DZ, HLD               # VMS+1 (cycle=4)
MVHL A, NA                # NOP
LD HL, $FETCH2            # HL = fetch2
#209
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#215

$T0_ADJUST                #174 - 10 ticks per min, cycle=3
LD Y, $VMS
FNEL DZ, HL               # HL = 0xF0/0xE0
#179
ORHL A, NA                # A = T1 | 0xF0/0XE0
LD HL, $INC$NULL
FNH A, HLA                # A+1 (A +ve if T1=0x?F)
LDP HL, $INC$NULL
LDN HL, $IDEN$NULL
#190
LDZ Y, $T0
FNH DZ, HLD               # adjust T0 every 16/32 T1
LD PC, $EXIT196
#196

$EXIT187                  #187 - 5 ticks per hour, cycle=3
NOP
NOP
NOP
#190
NOP
NOP
NOP
NOP
NOP
NOP
$EXIT196                  #196 - 10 ticks per min, cycle=3
$EXIT110                  #110 cycle=1
NOP
LD HL, $INC$NULL
#199,113
LDZ Y, $VMS
FNH DZ, HLD               # VMS+1 (cycle=4,2)
$EXIT160                  #160 - 15 ticks per second, cycle=3
MVHL A, NA                # NOP
LD HL, $FETCH2            # HL = fetch2
#209,166,123
LD Y, $VMS                # set Y = $VMS on exit
VMPHL DZ, PGA             # jump to next VMC
#215,172,129
